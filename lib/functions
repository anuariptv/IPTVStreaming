#! /bin/bash

#************************************************
#   Created on 2017-01-17 by liuxiaohu 
#
#   Desc: Functions that iptvstreaming will use
#************************************************

# source configuration file
. /usr/local/IPTVStreaming/cfg/iptvstreaming.cfg

# initialize the directories
initDir() {
    if [ ! -d $streamPath ]; then
        mkdir -p $streamPath
    fi
    if [ ! -d $hlsPath ]; then
        mkdir -p $hlsPath
    fi
    if [ ! -d $logPath ]; then
        mkdir -p $logPath
    fi
    if [ ! -d $runPath ]; then
        mkdir -p $runPath
    fi
}

# remove all directories that have been initialized except logs
rmDir() {
    if [ -d $streamPath ]; then
        rm -rf $streamPath
    fi
    if [ -d $hlsPath ]; then
        rm -rf $hlsPath
    fi
    if [ -d $runPath ]; then
        rm -rf $runPath
    fi
}

# parse xml node to stream files whose name is name node and content is source node 
xml2streams() {
    pythonCmd=`which python`
    if [ $? -ne 0 ]; then
        echo -e "[\033[1;31mERROR:\033[0m] python is not installed"
        return 1
    fi
    if [ ! -f $xmlPath ]; then
        echo -e "[\033[1;31mERROR:\033[0m] xml file doesn't exist in $xmlPath"
        return 1
    fi
    $pythonCmd $libPath/xmlParser.py $xmlPath $streamPath
    if [ $? -ne 0 ]; then
        echo -e "[\033[1;31mERROR:\033[0m] xmlFile to stream files failed"
        return 1
    fi
    return 0
}

# start a stream by stream file
startStream() {
    ffmpegCmd=`which ffmpeg`
    if [ $? -ne 0 ]; then
        echo -e "[\033[1;31mERROR:\033[0m] ffmpeg is not installed"
        return 1
    fi
    local name=$1
    mkdir -p $hlsPath/$name
    local source=`head -1 $streamPath/$name`
    $ffmpegCmd -y -rw_timeout 1000000 -re -i $source -a:v copy -c:v copy -bsf:v h264_mp4toannexb -f hls -hls_list_size 5 -hls_wrap 10 -hls_time 10 $hlsPath/$name/$name.m3u8 > /dev/null 2>&1 &
    echo $! > $runPath/$name.pid
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] $name start" >> $logPath/iptvstreaming.log
    return 0
}

# start streaming source
startAllStreams(){
    initDir
    xml2streams
    if [ $? -ne 0 ]; then
    	rmDir
        return 1
    fi
    for name in `ls $streamPath`
        do
            startStream $name
            if [ $? -ne 0 ]; then
                return 1
            fi
        done
    $daemonPath/iptvstreamingd &
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] iptvstreaming start manually" >> $logPath/iptvstreaming.log
    return 0
}

# stop checking,streaming source and remove all additional directories
stopAllStreams(){
    ps -ef|grep iptvstreamingd|grep -v grep|awk '{print $2}'|xargs kill -9
    local count=`ps -ef|grep ffmpeg|grep -v grep|wc -l`
    if [ $count -ne 0 ]; then
        ps -ef|grep ffmpeg|grep -v grep|awk '{print $2}'|xargs kill -9
    fi
    rmDir
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] iptvstreaming stop manually" >> $logPath/iptvstreaming.log
    return 0
}

RES_COL=60
MOVE_TO_COL="echo -en \\033[${RES_COL}G"
SETCOLOR_SUCCESS="echo -en \\033[1;32m"
SETCOLOR_FAILURE="echo -en \\033[1;31m"
SETCOLOR_NORMAL="echo -en \\033[0;39m"

echo_success() {
    $MOVE_TO_COL
    echo -n "["
    $SETCOLOR_SUCCESS
    echo -n $"  OK  "
    $SETCOLOR_NORMAL
    echo -n "]"
    echo -ne "\r"
    return 0
}

echo_failure() {
    $MOVE_TO_COL
    echo -n "["
    $SETCOLOR_FAILURE
    echo -n $"  FAILED  "
    $SETCOLOR_NORMAL
    echo -n "]"
    echo -ne "\r"
    return 1
}
